Добавить удобную админ-панель и интеграцию с ботом/моделью, чтобы админ в реальном времени видел и управляял сообщениями, мог отправлять ответы вручную или включать автоответы, а также регулировать поведение/«настроение» модели на уровне чата и пользователя.

Функциональные требования
Интерфейс (веб)

Список чатов/сессий слева с поиском и фильтрами; при выборе — поток сообщений справа.

Поток сообщений показывает: текст, мета (время, отправитель, chat_id), метки модерации и статус отправки.

Поля для фильтрации истории по чату, пользователю, времени и ключевым словам.

Controls (панель настроек) для выбранного чата/пользователя:

Переключатель автоответа (on/off).

Триггер «отвечать при теге в группе» (on/off).

Параметры модели: temperature, max_tokens/length, tone (формальный/дружелюбный/нейтральный/агрессивный), verbosity (коротко/подробно), «эмоциональная интенсивность» (0–100).

Сохранить изменения «только для текущего сообщения» или «сохранить как пресет».

Presets: просмотреть/создать/редактировать/импорт/экспорт пресеты настроек личности/поведения.

Кнопки: «Ответить как админ» (сообщение отправляется от имени администратора), «Ответить как бот» (от имени модели). Перед отправкой — предпросмотр текста с возможностью редактирования.

Уведомления в UI о @-тегах и важных событиях (ошибки, сбои).

Журнал действий (audit-like) в интерфейсе: изменения пресетов, ручные отправки, включение/выключение автоответов.

Возможность пометить и удалить конкретные сообщения (модерация по словарю/ключевым фразам).

Сервер / интеграция

Реальные-time обновления: WebSocket (или SSE) для потоковой синхронизации сообщений между сервером и UI.

REST API для:

Получения истории сообщений, чатов, пресетов.

Управления пресетами и настройками per-chat/per-user.

Отправки сообщений (от admin/bot).

Обработка событий упоминаний/тегов в группах: приёмы событий от бота/канала, применение логики триггера.

Хранение состояний модели per-chat и per-user (включая временные «сессии» и возможность временного применения пресета на N часов).

Очередь сообщений для надёжной доставки и повторной обработки (Redis Streams или аналог).

Персистентность истории сообщений и пресетов (PostgreSQL или совместимый), Redis для сессий/кэша.

API-контракт (OpenAPI/Swagger) — спецификация обязательна.

Поведенческая логика (поведения модели)

Поддержка пресетов «личности» (например: дружелюбный-короткий, формальный-детальный).

Правила применения пресетов: глобально / per-chat / per-user / временно.

Обработка упоминаний: если @-тег и автоответ включён — сгенерировать ответ по текущему пресету; если выключен — уведомить админа в UI.

Возможность создавать «плейбуки» реакций: если сообщение содержит X, применять пресет Y и опционально отправлять фиксированный ответ.

Нефункциональные требования

Модульная архитектура (backend / frontend разделены).

Unit- и интеграционные тесты для ключевых API и потоковой логики.

README с инструкцией по сборке, запуску, переменным окружения, миграциям БД.

Примеры deployment: docker-compose.yml и примерный Kubernetes / Helm-шаблон (минимальный).

Пример CI: GitHub Actions workflow для тестов и сборки контейнеров.

Технические предпочтения (выбрать один стек в реализации)

Backend: Node.js (Express/Koa) + Socket.IO или Python (FastAPI) + WebSockets.

Frontend: React (SPA) + Tailwind.

БД: PostgreSQL для истории; Redis для сессий/кэша.

Очередь: Redis Streams (предпочтительно) или RabbitMQ.

Тесты: jest для Node / pytest для Python.

Acceptance Criteria (критерии приёмки)

Админ через UI в реальном времени видит входящие сообщения и может отправлять ответы вручную.

Есть возможность включить/отключить автоответы и триггер «отвечать при теге в группе».

В UI доступны и применимы пресеты поведения модели; пресеты можно создавать/импортировать/экспортировать.

История сообщений доступна и фильтруема по chat/user/time/keyword.

Очередь обеспечивает повторную обработку сообщений при ошибках.

Предоставлена OpenAPI спецификация, README, минимальный набор тестов и docker-compose для локального запуска.

Deliverables (то, что вернуть)

Полный исходный код (backend + frontend) в одной ветке/папке.

README с инструкциями по локальному запуску и деплою (env-переменные, миграции).

OpenAPI/Swagger спецификация API.

Docker-compose и пример Helm/K8s-манифеста.

Набор unit/integration тестов и пример GitHub Actions workflow.

Краткий список env-переменных и их назначения.

Краткий «migration plan» для интеграции в существующий код (точки входа: webhooks/events, где подключать очередь и хранилище состояний).